Middle Function
---------------
Write a function called middle that takes an array and returns a new array that contains all but the first and last elements.

myArray = [1, 2, 3, 4]
middle(myArray)  # [2,3]. 

public int[] middle(int[] values) { 
		if (values == null || (values != null && values.length <= 2)) ----------------- O(1)
			return new int[0]; ---------------------------------------------------------------- O(1)

		int[] middle = new int[values.length - 2]; --------------------------- O(1), O(n)
		int count = 0;
		for (int i = 1; i < values.length-1; i++) {  --------------------------- O(n)
				middle[count++] = values[i];--------------------------- O(1), O(1)
		}
		return middle;--------------------------- O(1)
	}

time complexity is O(n) and space complexity is O(n)


2D Arrays
Given 2D array calculate the sum of diagonal elements.
------------------------------------------------------
Example

myArray2D= {{1,2,3},{4,5,6},{7,8,9}};
 
sumDiagonalElements(myArray2D) # 15

public int sumOfDiagnoal(int[][] arrays) {
		if (arrays == null || (arrays != null && arrays.length == 0) || (arrays.length != arrays[0].length)) --- O(1)
			return 0; ----------------------------------- O(1)
		int sum = 0; ----------------------------------- O(1), O(1)
		for (int i = 0; i < arrays.length; i++) { ----------------------------------- O(n)
			sum += arrays[i][i]; ----------------------------------- O(1),O(1)
		}
		return sum;----------------------------------- O(1)

	}

time complexity is O(n) and space complexity is O(1)

Best Score
----------
Given an array, write a function to get first, second best scores from the array and return it in new array.

Array may contain duplicates.

Example

myArray = {84,85,86,87,85,90,85,83,23,45,84,1,2,0}
firstSecond(myArray) // {90, 87}


public int[] findHighestScores(int[] arrays) {
		if (arrays == null || (arrays != null && arrays.length == 0)) ---------- O(1)
			return new int[0]; ---------- O(1), O(1)
		int[] best = new int[2]; ---------- O(1), O(1)
		for (int score : arrays) { ---------- O(n)
			if (score > best[0]) { ---------- O(1)
				best[1] = best[0]; ---------- O(1) , O(1)
				best[0] = score;---------- O(1) , O(1)
			} else if (score > best[1] && score < best[0]) ---------- O(1)
				best[1] = score; ---------- O(1) , O(1)
		} 
		return best; ---------- O(1)
	}

time complexity is O(n) and space complexity is O(1)


Missing Number
--------------
Write Java function called findMissingNumberInArray that takes an integer array containing n-1 unique elements from a range of 1 to n, with one missing number, and returns the missing number.

Example

myArray = {1,2,3,4,6}
findMissingNumberInArray(myArray, 6) // 5
Hint:

Use the formula (n * (n + 1)) / 2 which  calculates the sum of the first n natural numbers.


public int findMissingNumberInArray(int[] arrays) {
		if (arrays == null || (arrays != null && arrays.length == 0)) --------- O(1)
			return 0;--------- O(1)
		int n= arrays.length+1; --------- O(1),O(1)
		int expectedOutCome = (n*(n+1))/2; --------- O(1),O(1)
		int actualOutCome = 0; --------- O(1),O(1)
		for(int value: arrays) --------- O(n)
			actualOutCome+= value;--------- O(1),O(1)
		
		return expectedOutCome-actualOutCome; --------- O(1)
	}

time complexity is O(n) and space complexity is O(1)

Duplicate Number
---------------
Write a function which takes integer array as a parameter and returns a new integer array with unique elements. (remove duplicates)

Example

removeDuplicates({1, 1, 2, 2, 3, 4, 5})
Output : [1, 2, 3, 4, 5]


public static int[] removeDuplicates(int[] arr) {
		int[] uniqueArray = new int[arr.length]; ------------- O(1), O(n)
		boolean status = true; ------------- O(1), O(1)
		int count = 0;------------- O(1), O(1)
		for (int i = 0; i < arr.length; i++) { ------------- O(n)
			for (int k = 0; k < arr.length; k++) { ------------- O(n)
				if (uniqueArray[k] == arr[i]) { ------------- O(1)
					status = false; ------------- O(1), O(1)
					break; ------------- O(1)
				}
			}
			if (status) ------------- O(1)
				uniqueArray[count++] = arr[i]; ------------- O(1), O(1)
			status = true; ------------- O(1), O(1)

		}

		return Arrays.copyOf(uniqueArray, count); ------------- O(1), O(1)
	}

time complexity is O(n^2) and space complexity is O(n)

Another Method for duplicate removal for sorted array

public static int[] removeDuplicates1(int[] arr) {
		int[] uniqueArray = new int[arr.length]; -------------- O(1),O(n)
		int count = 0;-------------- O(1),O(1)

		uniqueArray[count++] = arr[0]; -------------- O(1),O(1)
		for (int i = 1; i < arr.length; i++) { -------------- O(1)
			if (arr[i] != arr[i - 1]) -------------- O(1)
				uniqueArray[count++] = arr[i]; -------------- O(1),O(1)
		}
		return Arrays.copyOf(uniqueArray, count); -------------- O(1),O(1)
	}

time complexity is O(n) and space complexity is O(n)


Remove Duplicates from Sorted Array - LeetCode 26
-----------------------------------
Given a sorted array nums, remove the duplicates in-place such that each element appears only once 
and returns the new length. Do not allocate extra space for another array; 
you must do this by modifying the input array in-place with O(1) extra memory.

Example:

Input: nums = [1, 1, 2] 
Output: 2

public static int removeDuplicates1(int[] arr) {
		int count =0; -------------------O(1), O(1)
		for(int i=1;i<arr.length;i++) { -------------------O(n)
			if(arr[i] != arr[count]) { -------------------O(1)
				count++; -------------------O(1), O(1)
				arr[count]=arr[i]; -------------------O(1), O(1)
			}
		}
		return Arrays.copyOf(arr, count+1).length;
	}

time complexity is O(n) and space complexity is O(1)

Best Time to Buy and Sell Stock - LeetCode 121
----------------------------------------------
You are given an array prices where prices[i] is the price of a given stock on the ith day. 
You want to maximize your profit by choosing a single day to buy one stock 
and choosing a different day in the future to sell that stock. Return the maximum profit 
you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example:

Input: prices = [7, 1, 5, 3, 6, 4] 
Output: 5 
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.

public static int stockCalc(int[] stockPrices) {
		int minprice = Integer.MAX_VALUE; --------------------- O(1),O(1)
		int profit = 0; --------------------- O(1),O(1)
		for (int price : stockPrices) { --------------------- O(n)
			if (price < minprice) --------------------- O(1)
				minprice = price; --------------------- O(1),O(1)
			else if (price - minprice > profit) --------------------- O(1)
				profit = price - minprice; --------------------- O(1),O(1)
		}
		return profit;--------------------- O(1)
	}

time complexity is O(n) and space complexity is O(1)


Two Sum - LeetCode 1
---------------------
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.

Examples

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1]


Input: nums = [3,2,4], target = 6
Output: [1,2]


public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) { -------------- O(n)
            for (int j = i + 1; j < nums.length; j++) { -------------- O(n)
                if (nums[i] + nums[j] == target) { -------------- O(1)
                    return new int[] { i, j }; -------------- O(1), O(1)
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution found");
    }

time complexity is O(n^2) and space complexity is O(1)



Max Product of Two Integers
How to find maximum product of two integers in the array where all elements are positive.
Since all elements are positive, the product of two larger numbers will 
always be greater than the product of two smaller numbers.
Example

int[] intArray = {10,20,30,40,50};
maxProduct(intArray) // (40,50)


public String maxProducts(int[] arrays) {
		int maxProduct1 = 0;
		int maxProduct2 = 0;
		for(int value: arrays) {
			if(value > maxProduct1) {
				maxProduct2=maxProduct1;
				maxProduct1 = value;
			} else if (value > maxProduct2 && value < maxProduct1) {
				maxProduct2=value;
			}
		}
		return maxProduct1 + " " + maxProduct2;
	}

time complexity is O(n) and space complexity is O(1)

Unique / Contains Duplicate - LeetCode 217
--------------------------------------------
Write a program to check if an array is unique or not.

Example

int[] intArray = {1,2,3,4,5,6};
isUnique(intArray) // true

public boolean isArrayContainsDuplicate(int[] arrays) {
		for (int i = 0; i < arrays.length; i++) {
			for (int j = i+1; j < arrays.length; j++) {
				if(arrays[i] == arrays[j])
					return true;
			}
		}
		return false;
	}

time complexity is O(n^2) and space complexity is O(1)


Permutation
----------
Your are given two integer arrays. Write a program to check if they are permutation of each other.

Example

int[] array1 = {1,2,3,4,5};
int[] array2 = {5,1,2,3,4};
permutation(array1, array2)
Output
true

public boolean isArrayPermutations(int[] array1, int[] array2) {
		if (array1.length != array2.length) 
			return false;
		int count1 = 0;
		int count2 = 0;
		int mul1=1;
		int mul2=1;
		for (int i = 0; i < array1.length; i++) {
			count1 += array1[i];
			count2 += array2[i];
			mul1 *= array1[i];
			mul2 *= array2[i];
		}
		if (count1 == count2 && mul1 == mul2)
			return true;
		else
			return false;
	}

time complexity is O(n) and space complexity is O(1)

Rotate Matrix
--------------
Given an image represented by an NxN matrix write a method to rotate the image by 90 degrees.

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly.

DO NOT allocate another 2D matrix and do the rotation.

