Arrays:
------

- Array can store data of specified type
- Elements of an array are located in a contiguous
- Each element of an array has a unique index
- The size of an array is predefined and cannot be modified

Types of array
-------------
* Single dimensional array - int[] a;
* Multidimentional array
   -> two dimensional array  - int[][] a;
   -> three dimensional array - here we have depth in the structure consider cube - int[][][] a;
   -> four dimensional array
   -> n dimansional array

Arrays in memory:
-----------------
datas are stored in ram

1D array store in contiguous manner, so that it is easy to access faster
--------
example:
if we have array like  |1|2|3|1|2|3|1|2|3|
Inside ram it will stpre contiguous manner
 _ _ _ _ _ _ _ _ _ _ _ _
|                       |
||1|2|3|1|2|3|1|2|3|    | 
|_ _ _ _ _ _ _ _ _ _ _ _|


2D Array stores in non contigious manner(but each row stores in contiguous manner), it is store like below
--------
example
if we have array like this
row1 -> |1|2|3|
row2 -> |4|5|6|
row3 -> |7|8|9|

IN ram, it will divide each row based on jvm and store it as 1D manner and java keep that reference of each row like this. 

 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
|           |4|5|6|                     |
||1|2|3|                                | 
|_ _ _ _ _ _ _ _ _ _ _ _|7|8|9|_ _ _ _ _|


3D Array is also store in non contiguous manner(but each row stored in contiguous manner), it is rarely used in the industory.
--------
int[x][y][z]
x- is the depth means x 2D array
y- is the rows
z- is the column
example: int[][][] arr = new int[3][4][5]

it will store like as 1D manner like 0depth 0row 0column, 0depth 0row 1column,  below


arr --> [ref to 2D array 1, ref to 2D array 2, ref to 2D array 3]  ---- depth
        |
        V
  2D Array 1 --> [ref to 1D array 1, ref to 1D array 2, ref to 1D array 3, ref to 1D array 4]  --- rows
  2D Array 2 --> [ref to 1D array 1, ref to 1D array 2, ref to 1D array 3, ref to 1D array 4]
  2D Array 3 --> [ref to 1D array 1, ref to 1D array 2, ref to 1D array 3, ref to 1D array 4]
        |
        V
  1D Array 1 --> [int, int, int, int, int] ------ columns
  1D Array 2 --> [int, int, int, int, int]
  1D Array 3 --> [int, int, int, int, int]
  1D Array 4 --> [int, int, int, int, int]


Creation of array
-----------------

int[] a; -- declaration, IN memory it will not allocate any storage for this. it will just create a varibale for this
a=new int[3]; -- instantiation, IN memory it will create 3 blocks for this array with default vale 0, and variable stores first index address
a[0]=1; -- initialization, it will asaign the values

public void arr() {
  int[] arr; ------------------------- O(1)
  arr=new int[3]; ------------------------- O(1)
  arr[0] = 1; ------------------------- O(1)   }
  arr[1] = 2; ------------------------- O(1)   }  ----------> O(n)
  arr[2] = 3; ------------------------- O(1)   }
  sysout(arr); ------------------------- O(1)

String sarray[] = {"arr1","arr2"} ------------------ O(1) -- because we are just initializing the element
}

see the time complexitiy above

Traversal of array
------------------

traverse using loops

public void traverse() {
for(int i=0;i<arr.length;i++) ------------- O(n)
sysout(arr[i])----------------------------- O(1)
}

timecomplexity is O(n) and space complexity is O(1) because no extra elements are used


Searching of an array:
-----------------------
these kind of search is also called as linear search
public void searchArray(int value)
{
for(int i=0; i<arr.length; i++) {  ----------------------------- O(n)
if(arr[i] == value) { ------------------------------------------ O(1)
sysout("value found in index:"+ i); ------------------------------------------ O(1)
return; ------------------------------------------ O(1)
}
}
sysout("value not found")  ------------------------------------------ O(1)
}

time complexity is O(n) and space complexity is O(1)


Deleting value from array
-------------------------

In practial we cannot delete a value from an array, we can update the values as integer min value

public void delete(int value)
{
int index = searchArray(value); --------------- O(n)
arr[index]=Integer.MIN_VALUE; ------------------O(1)
}
INTEGER.MIN_VALUE is -2^31
time complexity is O(n) and space complexity is O(1)

OR

we can delete based on the index as a parameter

Time and space complexity of 1D Array
-------------------------------------
                               Time complexity       Space complexity
creating an empty array         O(1)                  O(n)
inserting a value               O(1)                  O(1)
traversing an array             O(n)                  O(1)
accessing an given cell         O(1)                  O(1)  
searching in array              O(n)                  O(1)
deleting a value based on index O(1)                  O(1)

-----------------------------------------------------------------------------------------------------------------------

Creation of 2D Array
---------------------

int[row][column] 2dArray;

public void twoDArray() {
		//declaration
		int[][] array; -------------------------------------- O(1)
		//instantiation
		array = new int[2][2];-------------------------------------- O(1)
		//intialization
		array[0][0] = 1;-------------------------------------- O(1)   }
		array[0][1] = 1;-------------------------------------- O(1)   } -------------- O(mn)
		array[1][0] = 1;-------------------------------------- O(1)   }
		array[1][1] = 1;-------------------------------------- O(1)   }
		
		System.out.println(java.util.Arrays.deepToString(array)); -------------------------------------- O(1)
		
		//String array
		
		String[][] strarray = {{"A","B"}, {"C","D"}}; -------------------------------------- O(1)
		System.out.println(java.util.Arrays.deepToString(strarray)); -------------------------------------- O(1)
		
	}


