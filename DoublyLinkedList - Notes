Create Doubly linked list
-------------------------

Head|001         null|data1|null
                      001
Tail|001

public Node createDoublyLinkedList(int dataValue) {
		Node newNode = new Node(dataValue);
		head = tail = newNode;
		size = 1;
		return head;
	}

time and space complexity will be O(1) and O(1)

Insertion
--------  
Head|001         null|data1|002        001|data2|null
                      001                   002
Tail|002

public void insert(int dataValue ,int location) {
		if(location < 0 || location > size) {
			System.out.println(" invalid location  !!");
			return;
		}else if (head == null) {
			createDoublyLinkedList(dataValue);
			return;
		}
		Node newNode = new Node(dataValue);
		if(location == 0) {
			newNode.next = head;
			head.prev = newNode;
			head = newNode;
		} else {
			int index = 0;
			Node tempNode = head;
			while (index < location - 1) {
				tempNode = tempNode.next;
				index++;
			}
			newNode.prev = tempNode;
			newNode.next = tempNode.next;
			tempNode.next = newNode;
			
			if (tempNode == tail) {
				tail = newNode;
				tail.prev = tempNode;
				tail.next = null;
			} else {
				newNode.next.prev = newNode;
			}

		}
size++;
}	

Time and space complexity will be O(n) and O(1)

Traversal
---------

public void displayFront() {
		if (head != null) {
			Node tempNode = head;
			for (int i = 0; i < size; i++) {
				System.out.println(tempNode.data);
				tempNode = tempNode.next;
			}
		} else {
			System.out.println("list is empty");
		}
	}

Time and space complexity will be O(n) and O(1)


Reverse traversal
-----------------

public void displayLast() {
		if (tail != null) {
			Node tempNode = tail;
			for (int i = 0; i < size; i++) {
				System.out.println(tempNode.data);
				tempNode = tempNode.prev;
			}
		} else {
			System.out.println("list is empty");
		}
	}

Time and space complexity will be O(n) and O(1)

// Deletion Method
  public void deleteNodeDLL(int location) {
    if (head == null) {
      System.out.println("The DLL does not exist!");
      return;
    } else if (location == 0) {
      if (size == 1) {
        head = null;
        tail = null;
        size--;
        return;
      } else {
        head = head.next;
        head.prev = null;
        size--;
      }
    } else if (location >= size) {
      DoublyNode tempNode = tail.prev;
      if (size == 1) {
        head = null;
        tail = null;
        size--;
        return;
        } else {
          tempNode.next = null;
          tail = tempNode;
          size--;
        }
    } else {
      DoublyNode tempNode = head;
      for (int i = 0; i < location-1; i++) {
        tempNode = tempNode.next;
      }
      tempNode.next = tempNode.next.next;
      tempNode.next.prev = tempNode;
      size--;
    }
  }

  // Delete entire DLL
  public void deleteDLL() {
    DoublyNode tempNode = head;
    for (int i =0; i< size; i++) {
      tempNode.prev = null;
      tempNode = tempNode.next;
    }
    head = null;
    tail = null;
    System.out.println("The DLL has been deleted!");
  }

