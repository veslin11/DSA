Recursion - is a way of solving problems by have a function calling itself

Properties:
----------

* Performing same operations multiple times by using different inputs
* In every step receiving smaller inputs to make the problem smaller
* Base condition needed to stop the recursion, else it will leads to infinite loop

example

public void recursion(int n) {
if(n==1){
  sysout("recursion stopped")
  } else {
  recursion(n-1);
  }
  }

why we need recursion
--------------------

Recursive thinking is important to solve similar sub problems
Recursion is used to solve similar sub problems of the main prob
when to choose -> if you can divide the problems to sub problems with same functionality
Prominent usage of recursion in data structure, Trees and graphs
It is used in many alogorithm(divide and conquire, greedy algorthim, dynamic programming)

Logic Behind the Recursion
--------------------------

Two main condition: 1. Exit condition, 2. Recursive calling

Recursion is using the stack memory to store the recursive calling

example:

public void recursiveN(int n) {
		if(n<=0) {
			System.out.println("recursion completed");
		} else {
			recursiceN(n-1);
			System.out.println("n is: "+n);
		}
	}

if recursiveN(4), recursive calls will be stored like below stack memory

|               |   
| recursiveN(1) |
| recursiveN(2) |
| recursiveN(3) |
| recursiveN(4) |
|_______________|
Stack Memory

and the print statement printing like 1 2 3 4


Recursive vs iterative solutions
--------------------------------

power of 2 in both ways
public int powerOfTwo(int n) {
		if (n == 0) {
			System.out.println("");
			return 1;
		} else {
			int powerOfTwo = 2 * powerOfTwo(n - 1);
			System.out.println("power of 2: "+ powerOfTwo);
			return powerOfTwo;
		}
	}
	
	public void powerOfTwoIterative(int n) {
		int i=0;
		int power = 1;
		while(i!=n) {
			power = power * 2;
			i++;
		}
		System.out.println("power of 2: "+ power);
	}


Points                                  Recursive                             Iterative
Space efficient ?                          No(stack memory is needed)             Yes
Time efficient ?                           No(time consumes for push and pop)     Yes
easy to code ?                             Yes                                    No


Wnen to use/avoid recursion:
----------------------------

To use
* when we can easily breakdown the problems into similary sub problems
* when we are fine with extra overhead(both time and space complexity)
* when we need a quick working solution instead of efficient one
* when we traverse a tree
* when we use memoziation in recursion

To Avoid
* If time and space complexity is matter for us
* recursion can be slow


write recursion in three steps
------------------------------

1. to find recursion case
 for factorial of no, recursive case will be n*(n-1)

2. Base case - need to find the condition which stops the recusrion
3 unintentional case - need to validate the input if input is not a valid
  - what if the input is negative no

public int factorial(int n) {
		if (n < 0)
			return -1;
		if (n == 0 || n == 1)
			return 1;
		return n * factorial(n - 1);
	}

Explanation:           24   
                  ______________
                 |              |            6
factorial(4) ->  4 * factorial(3)     ______________
                      |              |              |
		      |______________3 * factorial(2)           2
                                                            ______________
                                            |              |              |
 		                            |______________2 * factorial(1)            


time and space complexity will be O(1) and O(n)

Fibonacci series:
-----------------

0 1 1 2 3 5 8 13 21 34 55 ...............

f(n) = f(n-1) + f(n-2)

if f=5 = f(n-1) -> 3 + f(n-2) -> 2

0        1         1            2         3            5             8          13              21           34             55
                              f(n-2)    f(n-1)        


public int fibonacci(int n) {
		if(n<0)
			return -1;
		if(n==0 || n==1)
			return n;
		return fibonacci(n-1) + fibonacci(n-2);
	}
                                                         3
Explnation:                      _________________________________________________________
                                |    2                                                     |
fibonacci(3) ---->               fibonacci(2)                      +                  fibonacci(1)
                                      |                                               |__________|     
				      |_____ fibonacci(1) + fibonacci(0)                    1 
                                             |__________|   |___________|
				      	         1                1


How to measure recursive functions:
----------------------------------

recursive method with multiple calls like fibonacci

time complexity will be O(branches^depth) here branches will be how many calls present in the menthod like fibonacci there will be 2 calls
and depth will be intial input of the method lets say fibonacci(4) then depth will bbe 4

here time complexity will be O(2^4)
