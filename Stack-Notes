stack
-----

it is used for last in first out(LIFO)

example : back button in the browser 

some operations like push pop 

stack operations
----------------

create stack 
push - insert an element in array or linkelist
pop - remove the top of the element 
peek - retrive the top of the element 
is empty - to check if the stack is empty or not
is full - to check if the stack is full incase of array, 
          isfull method no need to implement in linked list
delete stack - to delete the entire stack


stack creation
--------------

we can create a stack by two ways arrays amd linked list

arrays
-----

easy to implement 
fixed size

linked list
-----------

dynamic size
hard to implement 

example with array
------------------

public class stack{
public int arr[];
public int topOfStack;

public stack(int size){
arr=new int[size];
topOfStack=-1;
}

// time and space complexity will be O(1) and O(n)

public boolen isEmpty(){
if(topOfStack==-1)
return true;
else
return false;
}

// time and space complexity will be O(1) and O(1)


public boolean isFull(){
if(arr !=null && topOfStack == arr.length()-1)
return true;
else
return false;
}

// time and space complexity will be O(1) and O(1)


public void push(int value)
{
if(isFull){
sysout("stack is full)
}
else {
arr[++topOfStack] = value;
}
}

// time and space complexity will be O(1) and O(1)

public int pop()
{
if(isEmpty())
return -1;
else{
return arr[topOfStack--];
}
}

// time and space complexity will be O(1) and O(1)

public int peek()
{
if(isEmpty())
return -1;
else{
return arr[topOfStack];
}
}

// time and space complexity will be O(1) and O(1)

public void deleteStack(){
arr=null;
}

// time and space complexity will be O(1) and O(1)

}

Example with linkedList
-----------------------

Here we have to use linkedlist that we already worked. by using the linkedlist class

public class stackUsingLinkedList{
public SinglyLikedList list;

public stackUsingLinkedList(){
list = new SinglyLikedList();
}

// time and space complexity will be O(1) and O(n)

public boolen isEmpty(){
if(list.head == null)
return true;
else
return false;
}

// time and space complexity will be O(1) and O(1)

public void push(int value)
{
alist.insertInLinkedList(value,0);
}
In the above case, we have to mention 0 for every insertions

// time and space complexity will be O(1) and O(1)

public int pop()
{
int result = -1;
if(isEmpty())
sysout("stack is empty");
else{
result = list.head.data;
list.delete(0); //using index
}
return result;
}

// time and space complexity will be O(1) and O(1)

public int peek()
{
if(isEmpty())
return -1;
else{
return list.head.data;
}
}

// time and space complexity will be O(1) and O(1)

public void deleteStack(){
list.head=null;
}

// time and space complexity will be O(1) and O(1)

}
