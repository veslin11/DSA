Describe how you could use a single Array to implement three stacks:
-------------------------------------------------------------------

public class ThreeInOne {
	private int numberOfStacks = 3;
	private int stackCapacity;
	private int[] values;
	private int[] sizes;

	public ThreeInOne(int stackSize) {
		values = new int[stackSize * numberOfStacks];
		sizes = new int[numberOfStacks];
		stackCapacity = stackSize;
	}

	// isFull
	public boolean isFull(int stackNum) {
		if (sizes[stackNum] == stackCapacity)
			return true;
		else
			return false;
	}

	// isEmpty
	public boolean isEmpty(int stackNum) {
		if (sizes[stackNum] == 0)
			return true;
		else
			return false;
	}

	// indexOfTop - this is helper method for push, pop and peek methods

	private int indexOfTop(int stackNum) {
		int size = sizes[stackNum];
		int offset = (stackNum) * stackCapacity;
		return offset + size -1;
	}

	// push
	public void push(int stackNum, int value) {
		if (isFull(stackNum)) {
			System.out.println("Stack Full for satck no : " + stackNum);
			return;
		} else {
			sizes[stackNum]++;
			values[indexOfTop(stackNum)] = value;
		}
	}

	// pop
	public int pop(int stackNum) {
		if (isEmpty(stackNum)) {
			System.out.println("Stack empty for satck no : " + stackNum);
			return -1;
		} else {
			int result;
			result = values[indexOfTop(stackNum)];
			values[indexOfTop(stackNum)] = Integer.MIN_VALUE;
			sizes[stackNum]--;
			return result;
		}
	}

	// peek

	public int peek(int stackNum) {
		return values[indexOfTop(stackNum)];
	}

}
