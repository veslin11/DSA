Describe how you could use a single Array to implement three stacks:
-------------------------------------------------------------------

public class ThreeInOne {
	  private int numberOfStacks = 3;
	  private int stackCapacity;
	  private int[] values;
	  private int[] sizes;

	  public ThreeInOne(int stackSize) {
	    values = new int[stackSize];
	    sizes = new int[numberOfStacks];
	    sizes[0] = 0;
	    sizes[1] = values.length/numberOfStacks;
	    sizes[2] = ((2*values.length)/numberOfStacks);
	  }

	  // isFull
	  public boolean isFull(int stackNum) {
	    if(stackNum == 1) {
	        if(sizes[0] == values.length/numberOfStacks){
	            return true;
	        } else {
	            return false;
	        }
	    } else if (stackNum == 2) {
	        if(sizes[1] == ((2*values.length)/numberOfStacks)){
	            return true;
	        } else {
	            return false;
	        }
	        
	    } else if (stackNum == 3) {
	        if(sizes[2] == values.length){
	            return true;
	        } else {
	            return false;
	        }
	    } else {
	        System.out.println("Invalid stack num");
	        return false;
	    }
	  }

	  // isEmpty
	  public boolean isEmpty(int stackNum) {
	     {
	    if(stackNum == 1) {
	        if(sizes[0] == 0){
	            return true;
	        } else {
	            return false;
	        }
	    } else if (stackNum == 2) {
	        if(sizes[1] == values.length/numberOfStacks){
	            return true;
	        } else {
	            return false;
	        }
	        
	    } else if (stackNum == 3) {
	        if(sizes[2] == ((2*values.length)/numberOfStacks)){
	            return true;
	        } else {
	            return false;
	        }
	    } else {
	        System.out.println("Invalid stack num");
	        return false;
	    }
	  }
	  }

	  // indexOfTop - this is helper method for push, pop and peek methods

	  private int indexOfTop(int stackNum) {
	    if(stackNum ==1){
	        return sizes[0];
	    } else if (stackNum == 2) {
	         return sizes[1];
	    } else if(stackNum == 3) {
	        return sizes[2];
	    } else {
	    	return -1;
	    }
	  }

	  // push
	  public void push(int stackNum, int value) {
	    if(isFull(stackNum)) {
	        System.out.println("Stack Full for satck no : "+ stackNum);
	        return;
	    } else {
	         if(stackNum ==1){
	       values[sizes[0]] = value;
	       sizes[0] = sizes[0]+1;
	    } else if (stackNum == 2) {
	        values[sizes[1]] = value;
	       sizes[1] = sizes[1]+1;
	    } else if(stackNum == 3) {
	        values[sizes[2]] = value;
	       sizes[2] = sizes[2]+1;
	    }
	    }
	  }

	  // pop
	  public int pop(int stackNum) {
	   if(isEmpty(stackNum)) {
	       System.out.println("Stack empty for satck no : "+ stackNum);
	        return -1;
	   } else {
	       int result;
	    if(stackNum ==1){
	        result = values[sizes[0]-1];
	        sizes[0] = sizes[0]-1;
	        return result;
	    } else if (stackNum == 2) {
	        result = values[sizes[1]-1];
	        sizes[1] = sizes[1]-1;
	        return result;
	    } else if(stackNum == 3) {
	        result = values[sizes[2]-1];
	        sizes[2] = sizes[2]-1;
	        return result;
	    } else {
	        System.out.println("Invalid stack no:"+ stackNum);
	        return -1;
	    }
	    }
	  }

	  // peek

	  public int peek(int stackNum) {
	    return indexOfTop(stackNum);
	  }

	}
