Tree:
-----

Tree is a non linear data structure and it is represented as a hirerical format

Properties
---------
* Represent hirerical format
* each node has two parts - data and link to next node
* Base catogories and sub catogories under it 

why we need tree:
----------------

* Quicker and easier access
* Store hirerical data format like folder structure, xml/html structure, organizing data
* many different type of data structures which perform better in various situations
     -> BInary tree, AVL tree, Red black tree, Trie


Tree Terminology
---------------

* Root - top node without parent
* Edge - link between parent and child node
* leaf - a node with no childerns
* sibilings - childrens of same parents
* anchestors - parents, grandparents, great grand parents
* depth of node - length of path from root to node
* height of node - length of path from node to deepest node
* depth of tree - depth of root node, it will be 0
* height of tree - height of root node - length of root from root to deepest not

Binary tree
===========

Binary tree is a data structure in whcih each node has at most 2 childrens 
Binary tree is a family of data structures(BST, AVL Tree, Heap tree, red-black tree, syntax tree)


Type of binary tree
===================

-> Full Binary Tree -  Each node should contain zero or two child
 Example:
    root
      Parent1
        child1
          subchild1
          subchild2
        child2
      Parent2 

-> perfect binary tree - All node should contain 2 childrens except leaf node and tree should be balanced and same depth
 example: 
   root
     Parent1
        child1
        child2
     Parent2
        child1
        child2

-> Complete binary tree - All levels should be filed execept last level and last level should be keep left
 example:
                                          N1
                                         /  \
                                        N2    N3
                                       / \    / \
                                      N4  N5 N6  N7
                                    /  \
                                   N8  N9
  N8 and N9 should be keep left as possible, if both n8 and n9 are connected to n5 then this case should not be complete binary tree

-> Balanced binary tree - All leaf node should locate at the same distance of the root node
 Example:
                                         N1
                                        /  \
                                       N2   N3
                                      / \     \
                                     N4  N5    N6
 here all leaf node should have same distance to the same node

Binary tree representations
==========================

we can create binary tree using 2 types

* LinkedList

                                                             111|root|222
                                                           /              \
                                                  333|p1|444              555|p2|666
                                                      111                     222
                                               /             \            /         \
                                       null|c1|null     null|c2|null  null|c3|null  null|c4|null


 * Array 

Left child = Cell[2 * X]
Right child = Cell[2 * X +1]
here X = parent location
here we ignore 0th index, because tree insertion is based on calculation


   |  |r1|p1|p2|  |  |  |  |
    0   1  2  3  4  5  6  7

root node insert at 1th position

p1 node insert like cell[2 * 1(parent node of p1)] = 2
                    cell[2 * 1(parent node of p2) + 1] = 3

like this.....


Creation of Binary tree:
=======================

public class BinaryTree {

	public String value;
	public BinaryTree right;
	public BinaryTree left;
	public int height;

}

Binary Tree traversal
=====================

-> Depth firdt search
   * post order traversal
   * preorder traversal
   * in order traversal

-> Breadth firt search
   * level order traversal


Preorder traversal
==================

it will traverse through rootnode -> left subtree -> right subtree

*************************binary tree example image will be there in BinaryTree-Images file*****************************

//preOrder traversal
	
	public void preOrderTraversal(BinaryTree node) {
		if(node == null) {
			return;
		}
		
		System.out.print(node.value+ " -> ");
		
		preOrderTraversal(node.left); -------------------------- O(N/2), O(N)
		preOrderTraversal(node.right); -------------------------- O(N/2), O(N)
	}

tima and space complexiy will be O(n) and O(n)


In order tree traversal
=======================

it will traverse through left subtree -> root node -> right subtree

public void inOrderTraversal(BinaryTree node) {
		if(node == null) {
			return;
		}
		
		inOrderTraversal(node.left); -------------------------- O(N/2), O(N)
		System.out.print(node.value + " -> ");
		inOrderTraversal(node.right); -------------------------- O(N/2), O(N)
	}

time and space complexiy will be O(n) and O(n)


Post order traversal
====================

it will traverse through Left subtree -> right subtree -> root node

public void postOrderTraversal(BinaryTree node) {
		if(node == null) {
			return;
		}
		
		postOrderTraversal(node.left);
		postOrderTraversal(node.right);
		System.out.print(node.value + " -> ");
	}

time and space complexiy will be O(n) and O(n)

level order traversal
==================

it will traverse through level based, leve11, level2, level3......

public void levelOrderTraversal() {
		if (root == null) {
			return;
		}
		Queue<BinaryTree> queue = new LinkedList<>(); ----------------------- O(1), O(1)
		queue.add(root); ----------------------- O(1)
		while (!queue.isEmpty()) { ----------------------- O(n)
			BinaryTree presentNode = queue.remove(); ----------------------- O(1), O(1)
			System.out.print(presentNode.value + " -> "); ----------------------- O(1), O(1)

			if (presentNode.left != null) ----------------------- O(1), O(1)
				queue.add(presentNode.left); ----------------------- O(1), O(n)
			if (presentNode.right != null) ----------------------- O(1), O(1)
				queue.add(presentNode.right); ----------------------- O(1), O(n)
		}
	}

time and space complexity will be O(n) and O(n)

Binary search
=============

we have to traverse each node to find the specific node but the efficient traversal method is level order traversal
because other traversal method uses stack data structure which is less efficient than queue

public BinaryTree binarySearch(String nodeValue) {
		if (root == null) {
			return null;
		}
		Queue<BinaryTree> queue = new LinkedList<>();
		queue.add(root);
		while (!queue.isEmpty()) {
			BinaryTree presentNode = queue.remove();
			System.out.print(presentNode.value + " -> ");

			if (presentNode.value.equals(nodeValue)) {
				return presentNode;
			}
			if (presentNode.left != null)
				queue.add(presentNode.left);
			if (presentNode.right != null)
				queue.add(presentNode.right);
		}
		
		return null;
	}

time and space complexity will be O(n), O(n)

Delete Binary tree
=====================

if root node is null we need to return
else
find the node which is to be deleted
replace the deletenode to deepestnode
delete the deepese node

// get deepest node
	public BinaryTree getDeepestNode() {
		Queue<BinaryTree> queue = new LinkedList<>();
		queue.add(root);
		BinaryTree presentNode = null;
		while (!queue.isEmpty()) {
			presentNode = queue.remove();

			if (presentNode.left != null)
				queue.add(presentNode.left);
			if (presentNode.right != null)
				queue.add(presentNode.right);
		}
		return presentNode;
	}

	// Delete deepest node
	public void deleteDeepestNode() {
		Queue<BinaryTree> queue = new LinkedList<>();
		queue.add(root);
		BinaryTree previousNode, presentNode = null;
		while (!queue.isEmpty()) {
			previousNode = presentNode;
			presentNode = queue.remove();
			if (presentNode.left == null) {
				previousNode.right = null;
				return;
			} else if (presentNode.right == null) {
				presentNode.left = null;
				return;
			}
			queue.add(presentNode.left);
			queue.add(presentNode.right);
		}
	}
	
	//Delete node
	public void deleteNode(String value) {
		if (root == null) {
			return;
		}
		Queue<BinaryTree> queue = new LinkedList<>(); ----------------------- O(1), O(1)
		queue.add(root); ----------------------- O(1), O(1)
		while (!queue.isEmpty()) { ----------------------- O(n), O(1)
			BinaryTree presentNode = queue.remove(); ----------------------- O(1), O(1)
			System.out.print(presentNode.value + " -> "); ----------------------- O(1), O(1)

			if (presentNode.value.equals(value)) { ----------------------- O(n), O(1)
				presentNode.value = getDeepestNode().value; ----------------------- O(n), O(n)
				deleteDeepestNode(); ----------------------- O(n), O(n)
				System.out.println("Given node is deleted !!!"); ----------------------- O(1), O(1)
				return; ----------------------- O(1), O(1)
			}
			if (presentNode.left != null) ----------------------- O(1), O(1)
				queue.add(presentNode.left); ----------------------- O(1), O(1)
			if (presentNode.right != null) ----------------------- O(1), O(1)
				queue.add(presentNode.right); ----------------------- O(1), O(1)
		}
		System.out.println("Node is not found"); ----------------------- O(1), O(1)
	}

time and space complexity will be O(n) and O(n)

Delete entire BT
==================
	public void deleteBinaryTree() {
		root = null;
		System.out.println("Binary Tree deleted");
	}

time and space complexity will be O(1) and O(1)
